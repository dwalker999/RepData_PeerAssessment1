class(cls_list)
as.character(cls_list)
cls_vect <- sapply(flags, class)
class(cls_vect)
sum(flags$orange)
flag_colors <- flags[, 11:17]
head(flag_colors)
lapply(flag_colors, sum)
sapply(flag_colors, sum)
sapply(flag_colors, mean)
flag_shapes <- flags[, 19:23]
lapply(flag_shapes, range)
sapply(flag_shapes, range)
shape_mat <- sapply(flag_shapes, range)
shape_mat
class(shape_mat)
unique(c(3,4,5,5,5,6,6,))
unique(c(3,4,5,5,5,6,6))
lapply(flags, unique)
unique_vals <- lapply(flags, unique)
unique_vals
sapply(unique_vals, length)
sapply(unique_vals, length)
sapply(flags, length)
sapply(flags, unique)
lapply(unique_vals, function(elem) elem[2])
iris
?iris
i <- subset(iris, iris$Species == "virginica")
mean(i)
class(i)
i
mean(iris$Petal.Width)
mean(iris$Sepal.Width)
mean(subset(iris, iris$Species == "virginica"))
mean(iris$Sepal.Width)
margin(iris)
margin.table(iris)
?colMean
colmean?
)
?colMeans
colMeans(iris, dims = 4)
rowMeans(iris)
colMeans(iris[1:4])
colMeans(iris[4])
colMeans(iris[3])
colMeans(iris[1:4])
colMeans(iris[3])
i
i[1]
mean(i[1])
mean(i)
i
colMeans(i[1])
apply(iris[, 1:4], 2, mean)
library("datasets")
data(mtcars)
head(mtcars)
with(mtcars, tapply(mpg, cyl, mean))
apply(mtcars, 2, mean)
head(mtcars)
class(mtcars)
mtcars[1]
mtcars[0]
mtcars[1]
mtcars[2]
mtcars[3]
?mtcars
mtcars[,13]
mtcars[,1]
mtcars[,2]
mtcars[1,2]
head(mtcars)
head(mtcars)
split(mtcars, mtcars$cyl)
?split
meav(split(mtcars, mtcars$cyl))
mean(split(mtcars, mtcars$cyl))
x<-mean(split(mtcars, mtcars$cyl))
x
xx
xx<-mean(split(mtcars, mtcars$cyl))
xx
colMeans(split(mtcars, mtcars$cyl)))
colMeans(split(mtcars, mtcars$cyl))
?diff
c8 <- subset(mtcars, mtcars$cyl == 8)
c8
c4 <- subset(mtcars, mtcars$cyl == 4)
colMeans(c8, c8$cyl)
colMeans(c8, c8$cyl)
colMeans(c4, c4$cyl)
26.66 - 15.10
debug(ls)
ls
ls
ls(x)
ls
ls
ls
ls(x)
undebug(ls)
?debug
x<-1
debug(ls)
ls(x)
q
q
undebug(ls)
undebug(ls)
ls(x)
?iris
iris
c8
head(mtcars)
c8 <= subset(mtcars, mtcars$cyl==8)
c8 <- subset(mtcars, mtcars$cyl==8)
c4 <- subset(mtcars, mtcars$cyl==4)
mean(c8$mpg)
ans <- mean(c8$mpg) - mean(c4$mpg)
ans
ans <- mean(c4$mpg) - mean(c8$mpg)
ans
sapply(split(mtcars$mpg, mtcars$cyl), mean)
mean(mtcars$mpg, mtcars$cyl)
iris
head(iris)
i = subset(iris, iris$species=="virginica")
i
i <- subset(iris, iris$species=="virginica")
i
i <- subset(iris, iris$Species=="virginica")
i
mean(i$Sepal.Length)
apply(iris[, 1:4], 2, mean)
iris
i <- subset(iris, iris$Species=="virginica")
i
mean(i$Sepal.Length)
apply(iris[, 1:4], 2, mean)
tapply(mtcars$cyl, mtcars$mpg, mean)
with(mtcars, tapply(mpg, cyl, mean))
c8
mean(c8$hp) - mean(c4$hp)
swirl()
library(Swirl)
library("Swirl")
library("swirl")
swirl()
head(flags)
dim(flags)
class(flags)
cls_list - lapply(flags, class)
cls_list <- lapply(flags, class)
cls_list
class(cls_list)
as.character(cls_list)
cls_vect <- sapply(flags, class)
class(cls_vect)
sum(flags$orange)
flag_colors <- flags[, 11:17]
head(flag_colors)
lapply(flag_colors, sum)
sapply(flag_colors, sum)
sapply(flag_colors, mean)
flag_shapes <- flags[, 19:23]
lapply(flag_shapess, range)
lapply(flag_shapes, range)
shape_mat <- sapply(flag_shapes, range)
shape_mat
class(shape_mat)
unique(c(3,4,5,5,5,6,6))
unique_vals <- lapply(flags, unique)
unique_vals
lapply(unique_vals, length)
sapply(unique_vals, length)
sapply(flags, length)
sapply(flags, length)
sapply(flags, uniquw)
sapply(flags, unique)
lapply(unique_vals, function(elem) elem[2])
source('~/Documents/Coursera/Pgm2/ProgrammingAssignment2/cachematrix.R')
x <- Matrix(c(1,2,3,4,5,6,7))
x <- matrix(c(1,2,3,4,5,6,7))
x
makeCacheMatrix(x)
source('~/Documents/Coursera/Pgm2/ProgrammingAssignment2/cachematrix.R')
makeCacheMatrix(x)
y
x
y <- 3
y
makeCacheMatrix(x)
y
source('~/Documents/Coursera/Pgm2/ProgrammingAssignment2/cachematrix.R')
makeCacheMatrix(x)
source('~/Documents/Coursera/Pgm2/ProgrammingAssignment2/cachematrix.R')
cacheSolve(y)
source('~/Documents/Coursera/Pgm2/ProgrammingAssignment2/cachematrix.R')
rm y
y
y<-null
y<-NULL
y
rm(y)
y
x
makeCacheMatrix(x)
y
rm(y)
source('~/Documents/Coursera/Pgm2/ProgrammingAssignment2/cachematrix.R')
y
makeCacheMatrix(x)
y
makeCacheMatrix(x)
y
makeCacheMatrix(x)
y
source('~/Documents/Coursera/Pgm2/ProgrammingAssignment2/cachematrix.R')
makeCacheMatrix(x)
y
source('~/Documents/Coursera/Pgm2/ProgrammingAssignment2/cachematrix.R')
makeCacheMatrix()
x
source('~/Documents/Coursera/Pgm2/ProgrammingAssignment2/cachematrix.R')
cacheSolve(x)
x
source('~/Documents/Coursera/Pgm2/ProgrammingAssignment2/cachematrix.R')
makeCacheMatrix()
x
source('~/Documents/Coursera/Pgm2/ProgrammingAssignment2/cachematrix.R')
makeCacheMatrix()
x
cacheSolve(x)
solve(x)
class(x)
source('~/Documents/Coursera/Pgm2/ProgrammingAssignment2/cachematrix.R')
makeCacheMatrix()
class(x)
solve(x)
cacheSolve(x)
y
source('~/Documents/Coursera/Pgm2/makeVector.R')
makeVector()
makeVector(1:4)
source('~/Documents/Coursera/Pgm2/cachmean.R')
cachemean()
cachemean(x)
cachemean(makeVector$get)
cachemean(makeVector$get())
cachemean(makeVector)
makeVector(1:4)
$getmean
$getmean()
makeVector$get()
makeVector$get(x)
x
bigVec <- makeVector(1:1000)
bigVec
cachemean(bigVec)
bigVec <- makeVector(1:1000)
debug(makeVector)
bigVec <- makeVector(1:1000)
get
undebug(makeVector)
cachemean(bigVec)
debug(cachemean())
debug(cachemean)
cachemean(bigVec)
x
undebug(cachemean)
cachemean(bigVec)
bigVec <- makeVector(1:1000)
bigVec
bigVec$x
bigVec$y
bigVec$get
bigVec$set
bigVec <- makeVector(1:1000)
bigVec$list
bigVec$getmean
source('~/Documents/Coursera/Pgm2/makeCacheMatrix.R')
x <- makeCacheMatrix()
x
source('~/Documents/Coursera/Pgm2/makeCacheMatrix.R')
source('~/Documents/Coursera/Pgm2/makeCacheMatrix.R')
source('~/Documents/Coursera/Pgm2/makeCacheMatrix.R')
?matrix
matrix(1:6, nrow=3, ncol=3)
matrix(1:9, nrow=3, ncol=3)
x = matrix(1:9, nrow=3, ncol=3)
solve(x)
x = matrix(c(1,2,3,0,1,4,5,6,0), nrow=3, ncol=3)
solve(x)
x = matrix(c(1,2,3,0,1,4,5,6,0), nrow=3, ncol=3)
is.invertible(x)
?solve
?try
source('~/Documents/Coursera/Pgm2/makeCacheMatrix.R')
x
makeCacheMatrix(x)
cachSolve(x)
cacheSolve(x)
x
m <- makeCacheMatrix(x)
m
cacheSolve(m)
source('~/Documents/Coursera/Pgm2/makeCacheMatrix.R')
m <- makeCacheMatrix(x)
cacheSolve(m)
cacheSolve(m)
cacheSolve(m)
source('~/Documents/Coursera/Pgm2/ProgrammingAssignment2/cachematrix.R')
m <- makeCacheMatrix(x)
cacheSolve(m)
cacheSolve(m)
source('~/Documents/Coursera/Pgm2/ProgrammingAssignment2/cachematrix.R')
source('~/Documents/Coursera/Pgm2/ProgrammingAssignment2/cachematrix.R')
class(m)
cacheSolve(makeCacheMatrix(x))
cacheSolve(makeCacheMatrix(x))
cacheSolve(makeCacheMatrix(x))
source('~/Documents/Coursera/Pgm2/ProgrammingAssignment2/cachematrix.R')
cacheSolve(makeCacheMatrix(x))git push
source('~/Documents/Coursera/Pgm2/ProgrammingAssignment2/cachematrix.R')
source('~/Documents/Coursera/Pgm2/ProgrammingAssignment2/cachematrix.R')
View(`c4`)
rm(flags)
install.packages("RMySQL")
library("RMySQL")
ucscDb <- dbConnect(MySQL(), user="genome", host="genome-mysql.cse.ucsc.edu")
result <- dbGetQuery(uscsDB, "show databases;"); dbDisconnect(ucscDb);
result <- dbGetQuery(uscsDb, "show databases;"); dbDisconnect(ucscDb);
ucscDb <- dbConnect(MySQL(), user="genome", host="genome-mysql.cse.ucsc.edu")
result <- dbGetQuery(uscsDb, "show databases;"); dbDisconnect(ucscDb);
ucscDb <- dbConnect(MySQL(), user="genome", host="genome-mysql.cse.ucsc.edu")
result <- dbGetQuery(ucscDb, "show databases;"); dbDisconnect(ucscDb);
result
source("http://bioconductor.org/biocLite.R")
biocLite("rhdf5")
con = url("http://scholar.google.com/citations?user=HI-I6C0AAAAJ&hl=en")
htmlCode = readLines(con)
htmlCode
close(con)
htmlCode
swirl()
library(swirl)
swirl
swirl()
Sys.getlocale
Sys.getlocale("LC_TIME")
library(lubridate)
help(package = lubridate)
this_day <- today()
this_day
year(this_day)
wday(this_day)
wday(this_day, label = TRUE)
this_moment <- now()
this_moment
hour(this_moment)
ymd("1989-05-17")
my_Date <- ymd("1989-05-17")
my_date <- ymd("1989-05-17")
my_date
class(my_date)
ymd("1989 May 17")
mdy("March 12, 1975")
mdy(25081985)
dmy(25081985)
ymd("192012")
ymd("1920/1/2")
dt1
ymd_hms(dt1)
hms("03:22:14")
dt2
ymd(dt2)
update(this_moment, hours = 8, minutes = 34, seconds = 55)
this_moment
this_moment<-update(this_moment, hours = 8, minutes = 34, seconds = 55)
this_mment
this_moment
nyc <- now("America/New_York")
nyc
nyc + days(2)
depart<-nyc + days(2)
depart
depart <- update(depart, hours = 17, minutes = 34)
depart
arrive <- update(depart, hours = hours + 15, minutes = minutes + 50)
arrive <- update(depart, hours + 15, minutes + 50)
arrive <- update(depart, hours + 15, minutes + 50)
arrive <- hours + 15
arrive + hours(15)
depart + hours(15)
arrive <- depart + hours(15) + minutes(50)
?with_tz
with_tx(arrive, "Asia/Hong_Kong")
with_tz(arrive, "Asia/Hong_Kong")
arrive <- with_tz(arrive, "Asia/Hong_Kong")
arrive
last_time <- mdy("June 17, 2008m tz = "Singapore"")
last_time <- mdy("June 17, 2008" tz = "Singapore"")
last_time <- mdy("June 17, 2008", tz = "Singapore"")
last_time <- mdy("June 17, 2008", tz = "Singapore")
last_time <- mdy("June 17, 2008", tz = "Singapore")
last_time
?new_interval
how_long <- new_interval(last_time, arrive)
as.oersion(how_long)
as.period(how_long)
stopwatch()
x <- 10:30
x
print(x)
y <- c(1.7, "a")
y
y <- c(TRUE, 2 )
y
y <- c("a",TRUE, 2 )
y
x <- 1:3
x
y <- 4:6
y
cbind(x,y)
rbind(x,y)
x <- factor(c("yes", "yes", "no", "yes", "no"))
x
x
table(x)
x
x <- table(x)
x
?read_table()
?readtable()
?read-table()
?read-table()
?read.table()
swirl()
library("swirl")
ls()
rm(list=ls())
swirl()
5+7
x <- 5 + 7
x
y <- x -3
y
c(1.1, 9, 3.14)
z <- c(1.1, 9, 3.14)
z
?c()
?c
z
c(z, 555, z)
z * 2 + 100
my_sqrt = sqrt(z-1)
my_sqrt <- sqrt(z - 1)
my_sqrt
my_div <- z/my_sqrt
my_div
c(1,2,3,4) + c(0, 10)
c(1,2,3,4) + c(0,10,100)
z * 2 + 1000
my_div
swirl()
swirl()
path2csv
mydf <- read.csv(path2csv, stringAsFactors = FALSE)
mydf <- read.csv(file = path2csv, stringAsFactors = FALSE)
mydf <- read.csv(file = path2csv stringAsFactors = FALSE)
mydf <- read.csv(file = path2csv, stringAsFactors = FALSE)
?read.csv
mydf <- read.csv(path2csv, stringAsFactors = FALSE)
mydf <- read.csv(path2csv)
mydf <- read.csv(path2csv, stringsAsFactors = FALSE)
dim(mydf)
head(mydf)
library(dplyr)
packageVersion("dplyr")
type(mydf)
info(mydf)
typeof(mydf)
cran <- tbl_df(mydf)
typeof(cran)
rm("mydf")
cran
?select
select(cran, ip_id, package, country)
5:20
select(cran, r_arch:country)
select(cran, country:r_ach)
select(cran, country:r_arch)
cran
select(cran, -time)
-5:20
-(5:20)
select(cran, -(X:size))
filter(cran, package == "swirl")
filter(cran,r_version == "3.1.1", country == "US")
?Comparison
library(swirl)
library(swirl)
install_from_swirl("Exploratory Data Analysis")
swirl()
setwd("~/Documents/Coursera/Reproduceable Research")
source('~/Documents/Coursera/Reproduceable Research/x2.R')
source('~/Documents/Coursera/Reproduceable Research/x2.R')
source('~/Documents/Coursera/Reproduceable Research/x2.R')
source('~/Documents/Coursera/Reproduceable Research/x2.R')
